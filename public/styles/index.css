html, body {
  height:100%; /* allows us to size the header height based as a percent */
  -webkit-background-size: cover;
  -moz-background-size: cover;
  -o-background-size: cover;
  background-size: cover;
  font-family: 'Lato';
}

div {
    overflow: hidden;
}

img {
    max-width: 100%;
    max-height: 100%;
}

#backgroundimage {
  /* Set rules to fill background */
  min-height: 100%;
  min-width: 100%;
	
  /* Set up proportionate scaling */
  width: 100%;
  height: 100%;
	
  /* Set up positioning */
  position: absolute;
  top: 0;
  left: 0;
  z-index: -1;
}

@media screen and (max-width: 1024px) { /* Specific to this particular image */
  img.backgroundimage {
    left: 50%;
    margin-left: -512px;   /* 50% */
    position:absolute;
    overflow: hidden;
  }
}

@-webkit-keyframes bounce {
	0%, 20%, 60%, 100%  { -webkit-transform: translateY(0); }
    40%  { -webkit-transform: translateY(-20px); }
	80% { -webkit-transform: translateY(-10px); }
}

.bounce {
  -webkit-animation: bounce 2s infinite ease-in-out;
}
  
  .parallax {
    /* The image used */
    background-image: url("/images/homepageBackground.jpg");

    min-height: 100%;
    min-width: 100%;
        
    /* Set up proportionate scaling */
    width: 100%;
    height: 100%;
        
    /* Set up positioning */
    position: absolute;
    top: 0;
    left: 0;
    z-index: -1;

    /* Create the parallax scrolling effect */
    background-attachment: fixed;
    background-position: center center;
    background-repeat: no-repeat;
    background-size: 100%;
    
    -webkit-background-size: cover;
    -moz-background-size: cover;
    -o-background-size: cover;
    background-size: cover;
}

/* Vertical Align */

.verticalCenter {
  position: relative;
  top: 50%;
  transform: translateY(-50%);
}


/* Circle */
#circle {
	border-radius: 50%;
	width: 25vw;
	height: 25vw; 
	background-color:transparent;
    border: 2px solid black;
}

/* Octagon */
.octagonWrap {
    width:160px;
    height:160px;
    float: left;
    position: relative;
}
.octagon {
    position: absolute;
    top: 0; right: 0; bottom: 0; left: 0;
    overflow: hidden;
    transform: rotate(45deg);
    background: transparent;
    border: 2px solid white;
    transition: all 0.4s ease-in-out;
}
.octagon:before {
    position: absolute;
    /* There needs to be a negative value here to cancel
     * out the width of the border. It's currently -3px,
     * but if the border were 5px, then it'd be -5px.
     */
    top: -3px; right: -3px; bottom: -3px; left: -3px;
    transform: rotate(45deg);
    content: '';
    border: inherit;
}
.octagon:hover {
    box-shadow:inset 0 0 0 5px rgba(255,255,255,.5), inset 0 0 0 100px rgba(0,0,0,.5);
}

@media screen and (max-width: 600px) {
  .octagon {
    visibility: hidden;
  }
}

